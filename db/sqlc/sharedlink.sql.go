// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: sharedlink.sql

package db

import (
	"context"
)

const createSharedlink = `-- name: CreateSharedlink :one
INSERT INTO sharedlinks (
  name,
  urlhash
) VALUES (
  $1, $2
) RETURNING id, name, urlhash, created_at
`

type CreateSharedlinkParams struct {
	Name    string `json:"name"`
	Urlhash string `json:"urlhash"`
}

func (q *Queries) CreateSharedlink(ctx context.Context, arg CreateSharedlinkParams) (Sharedlink, error) {
	row := q.db.QueryRowContext(ctx, createSharedlink, arg.Name, arg.Urlhash)
	var i Sharedlink
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Urlhash,
		&i.CreatedAt,
	)
	return i, err
}

const deleteSharedlink = `-- name: DeleteSharedlink :exec
DELETE FROM sharedlinks
WHERE id = $1
`

func (q *Queries) DeleteSharedlink(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteSharedlink, id)
	return err
}

const getSharedlink = `-- name: GetSharedlink :one
SELECT id, name, urlhash, created_at FROM sharedlinks
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetSharedlink(ctx context.Context, id int64) (Sharedlink, error) {
	row := q.db.QueryRowContext(ctx, getSharedlink, id)
	var i Sharedlink
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Urlhash,
		&i.CreatedAt,
	)
	return i, err
}

const listSharedlink = `-- name: ListSharedlink :many
SELECT id, name, urlhash, created_at FROM sharedlinks
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListSharedlinkParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListSharedlink(ctx context.Context, arg ListSharedlinkParams) ([]Sharedlink, error) {
	rows, err := q.db.QueryContext(ctx, listSharedlink, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Sharedlink
	for rows.Next() {
		var i Sharedlink
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Urlhash,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSharedlink = `-- name: UpdateSharedlink :one
UPDATE sharedlinks
SET name = $2
WHERE id = $1
RETURNING id, name, urlhash, created_at
`

type UpdateSharedlinkParams struct {
	ID   int64  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) UpdateSharedlink(ctx context.Context, arg UpdateSharedlinkParams) (Sharedlink, error) {
	row := q.db.QueryRowContext(ctx, updateSharedlink, arg.ID, arg.Name)
	var i Sharedlink
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Urlhash,
		&i.CreatedAt,
	)
	return i, err
}
